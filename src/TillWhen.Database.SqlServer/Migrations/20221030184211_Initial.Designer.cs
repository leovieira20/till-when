// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TillWhen.Database.SqlServer;

#nullable disable

namespace TillWhen.Database.SqlServer.Migrations
{
    [DbContext(typeof(TillWhenContext))]
    [Migration("20221030184211_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TillWhen.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TaskQueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TaskQueueId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.ProjectAggregate.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.QueueAggregate.TaskQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TaskQueues");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.HasOne("TillWhen.Domain.Aggregates.QueueAggregate.TaskQueue", null)
                        .WithMany("Projects")
                        .HasForeignKey("TaskQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TillWhen.Domain.Common.Duration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Days")
                                .HasColumnType("int");

                            b1.Property<int>("Hours")
                                .HasColumnType("int");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int");

                            b1.Property<int>("Tomatoes")
                                .HasColumnType("int");

                            b1.Property<int>("TotalHours")
                                .HasColumnType("int");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("Duration")
                        .IsRequired();
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.ProjectAggregate.ProjectTask", b =>
                {
                    b.HasOne("TillWhen.Domain.Aggregates.ProjectAggregate.Project", null)
                        .WithMany("PendingTasks")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Navigation("PendingTasks");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.QueueAggregate.TaskQueue", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
