// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TillWhen.Database.SqlServer;

#nullable disable

namespace TillWhen.Database.SqlServer.Migrations
{
    [DbContext(typeof(TillWhenContext))]
    partial class TillWhenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TillWhen.Domain.Aggregates.QueueAggregate.WorkableQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WorkableQueues");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.WorkableAggregate.Workable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Workables");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.WorkableAggregate.Workable", b =>
                {
                    b.OwnsOne("TillWhen.Domain.Common.Duration", "Estimation", b1 =>
                        {
                            b1.Property<Guid>("WorkableId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("OriginalDuration")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkableId");

                            b1.ToTable("Workables");

                            b1.WithOwner()
                                .HasForeignKey("WorkableId");
                        });

                    b.Navigation("Estimation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
