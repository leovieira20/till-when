// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TillWhen.Database.SqlServer;

#nullable disable

namespace TillWhen.Database.SqlServer.Migrations
{
    [DbContext(typeof(TillWhenContext))]
    partial class TillWhenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TillWhen.Domain.Aggregates.QueueAggregate.WorkableQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WorkableQueues");
                });

            modelBuilder.Entity("TillWhen.Domain.Common.WorkableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("WorkableQueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("workable_type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("WorkableQueueId");

                    b.ToTable("WorkableBase");

                    b.HasDiscriminator<string>("workable_type").HasValue("WorkableBase");
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.WorkableAggregate.Workable", b =>
                {
                    b.HasBaseType("TillWhen.Domain.Common.WorkableBase");

                    b.HasDiscriminator().HasValue("workable_base");
                });

            modelBuilder.Entity("TillWhen.Domain.Common.WorkableBase", b =>
                {
                    b.HasOne("TillWhen.Domain.Aggregates.QueueAggregate.WorkableQueue", null)
                        .WithMany("Workables")
                        .HasForeignKey("WorkableQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TillWhen.Domain.Common.Duration", "Estimation", b1 =>
                        {
                            b1.Property<Guid>("WorkableBaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("OriginalDuration")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("WorkableBaseId");

                            b1.ToTable("WorkableBase");

                            b1.WithOwner()
                                .HasForeignKey("WorkableBaseId");
                        });

                    b.Navigation("Estimation")
                        .IsRequired();
                });

            modelBuilder.Entity("TillWhen.Domain.Aggregates.QueueAggregate.WorkableQueue", b =>
                {
                    b.Navigation("Workables");
                });
#pragma warning restore 612, 618
        }
    }
}
